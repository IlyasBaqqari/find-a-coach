// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   createdBy   User   @relation(fields: [createdById], references: [id])
//   createdById String
//
//   @@index([name])
// }

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?  @relation
  // posts         Post[]
}

model Profile {
  id      String         @id @default(cuid())
  userId  String         @unique
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isCoach Boolean
  role    String
  level   String
  coaches Relationship[] @relation("coaching")
  coachee Relationship[] @relation("coachee")
}

model Relationship {
  id        String  @id @default(cuid())
  coachId   String
  coacheeId String
  coach     Profile @relation("coaching", fields: [coachId], references: [id])
  coachee   Profile @relation("coachee", fields: [coacheeId], references: [id])

  @@unique([coachId, coacheeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
